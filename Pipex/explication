/*
dup2 = est utiliser pour dupliquer un descripteur de fichier existant vers un autre
redirige la sortie vers un pipe

strerror :
Description : La fonction strerror permet de traduire un code d'erreur (errno) en une chaîne de caractères décrivant l'erreur correspondante.
Prototype : char *strerror(int errnum).
Exemple : printf("Erreur : %s\n", strerror(errno));.

access :
Description : La fonction access vérifie l'accessibilité d'un fichier en testant les permissions.
Prototype : int access(const char *path, int amode).
Exemple : if (access("fichier.txt", R_OK) == 0) {  Fichier accessible en lecture  }.

dup :
Description : La fonction dup duplique un descripteur de fichier existant.
Prototype : int dup(int oldfd).
Exemple : int new_fd = dup(old_fd);.

execve :
Description : La fonction execve remplace l'image du processus courant par un nouveau programme.
Prototype : int execve(const char *pathname, char *const argv[], char *const envp[]).
Exemple : execve("/chemin/vers/programme", argv, envp);.

fork :
Description : La fonction fork crée un nouveau processus en dupliquant le processus appelant.
Prototype : pid_t fork(void).
Exemple : pid_t child_pid = fork();.

pipe :
Description : La fonction pipe crée un tube (pipe) qui permet 
la communication entre processus.
Prototype : int pipe(int pipefd[2]).
Exemple : int pipe_fd[2]; pipe(pipe_fd);.

unlink :
Description : La fonction unlink supprime un fichier existant en le déliant de son répertoire.
Prototype : int unlink(const char *pathname).
Exemple : unlink("fichier_a_supprimer.txt");.

wait :
Description : La fonction wait suspend l'exécution du processus appelant jusqu'à ce que l'un de ses processus enfants se termine.
Prototype : pid_t wait(int *status).
Exemple : pid_t child_pid = fork(); if (child_pid != 0) wait(NULL);.

waitpid :
Description : La fonction waitpid suspend l'exécution du processus appelant jusqu'à ce que le processus spécifié se termine.
Prototype : pid_t waitpid(pid_t pid, int *status, int options).
Exemple : pid_t child_pid = fork(); if (child_pid != 0) waitpid(child_pid, NULL, 0);.

idee de Pipex -> on lis un fichier puis on execute cmd1 avec infile
on envoie l'output a cmd2 qui va ecrire l'outfile
pipe envoie output de la premiere execve() en input au deuxieme
execve() fork() pour faire deux proxess en un programme
dup2 change les fichier avec stdin et stdout

visuellement

// each cmd needs a stdin (input) and returns an output (to stdout)
   
    infile                                             outfile
as stdin for cmd1                                 as stdout for cmd2            
       |                        PIPE                        ↑
       |           |---------------------------|            |
       ↓             |                       |              |
      cmd1   -->    end[1]       ↔       end[0]   -->     cmd2           
                     |                       |
            cmd1   |---------------------------|  end[0]
           output                             reads end[1]
         is written                          and sends cmd1
          to end[1]                          output to cmd2
       (end[1] becomes                      (end[0] becomes 
        cmd1 stdout)                           cmd2 stdin)


explication:

Ce graphique illustre le concept de communication entre deux commandes (processus)
dans un système Unix-like en utilisant des tubes (pipes). 
Voici une explication détaillée :

cmd1 :

C'est le premier processus (commande) qui va lire l'entrée (stdin) depuis un fichier 
(infile dans ce cas).

cmd2 :
C'est le deuxième processus (commande) qui va écrire la sortie (stdout) vers un fichier
(outfile dans ce cas).

PIPE :
Représente un tube (pipe) qui permet la communication unidirectionnelle entre 
cmd1 et cmd2.

end[0] et end[1] :
Ce sont les extrémités du tube (pipe).
end[0] est l'extrémité utilisée par cmd1 pour lire la sortie de cmd2 
(elle est associée à la lecture).
end[1] est l'extrémité utilisée par cmd2 pour écrire sa sortie 
(elle est associée à l'écriture).
Communication de données :

cmd1 écrit ses données de sortie (stdout) dans le tube à travers end[1].
cmd2 lit les données d'entrée (stdin) depuis le tube à travers end[0].
Flux des données :

Les données sortent de cmd1 (sortie standard) et entrent dans le tube via end[1].
Les données sortent du tube via end[0] et entrent dans cmd2 (entrée standard).
infile et outfile :

infile est utilisé comme entrée (stdin) pour cmd1.
outfile est utilisé comme sortie (stdout) pour cmd2.
Circulation des données :

Les données circulent du fichier infile (stdin de cmd1), passent par cmd1, 
puis sont écrites dans le tube via end[1].
Les données sortent du tube via end[0], passent par cmd2, 
et sont écrites dans le fichier outfile (stdout de cmd2).

Ce schéma illustre le fonctionnement des tubes (pipes) 
pour permettre la communication entre les processus dans un pipeline, 
où la sortie d'un processus devient l'entrée du processus suivant. 
Les pipes facilitent le transfert de données d'un processus
 à un autre de manière efficace dans un système Unix-like.

*/

// exemple test  < test1 ls -l | wc -l > test2 
//